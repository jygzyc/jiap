name: Build and Distribute JIAP

on:
  push:
    branches: [ main ]
    paths:
      - 'jiap_core/**'
      - 'mcp_server/**'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'jiap_core/**'
      - 'mcp_server/**'
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Generate version number
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present for version number
          VERSION=${VERSION#v}
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          VERSION="pr-${{ github.event.number }}-${GITHUB_SHA::7}"
        else
          VERSION="main-${GITHUB_SHA::7}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-jiap-core:
    runs-on: ubuntu-latest
    needs: version

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: jiap_core

    - name: Build with Gradle
      run: ./gradlew build
      working-directory: jiap_core
      env:
        VERSION: ${{ needs.version.outputs.version }}

    - name: Run tests
      run: ./gradlew test
      working-directory: jiap_core

    - name: Create distribution
      run: ./gradlew dist
      working-directory: jiap_core
      env:
        VERSION: ${{ needs.version.outputs.version }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jiap-core-distribution
        path: |
          jiap_core/build/dist/*.jar
          jiap_core/build/libs/*.jar
        retention-days: 30

  build-mcp-server:
    runs-on: ubuntu-latest
    needs: version

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      working-directory: mcp_server
      run: uv sync --all-extras

    - name: Build package
      working-directory: mcp_server
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-server-distribution
        path: |
          mcp_server/dist/*.whl
          mcp_server/dist/*.tar.gz
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: [version, build-jiap-core, build-mcp-server]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          jiap-core-distribution/*.jar
          mcp-server-distribution/*.whl
          mcp-server-distribution/*.tar.gz
        name: Release ${{ needs.version.outputs.version }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}